1. Write a function that takes a list of numbers as input and returns a new list containing only the even numbers from the input list.
Use list comprehension to solve this problem.

sol : l1 = [1,2,3,6,44,3,22,33,5,6]
      l2 = [i for i in l1 if i%2==0]
      print(l2)


2.  Implement a decorator function called ‘timer’ that measures the execution time of a function. The ‘timer’ decorator should print the
    time taken by the decorated function to execute. Use the ‘time’ module in Python to calculate the execution time.

sol : import time
      
      def timer(func):
          def wrapper(*args, **kwargs):
              start_time = time.time()
              result = func(*args, **kwargs)
              end_time = time.time()
              execution_time = end_time - start_time
              print(f"Execution time of {func.__name__}: {execution_time} seconds")
              return result
          return wrapper
      @timer
      def my_function():
          # Code to be timed
          time.sleep(2)  # Simulating some time-consuming operation
      
      my_function()


3.  Write a function called ‘calculate_mean’ that takes a list of numbers as input and returns the mean (average) of the numbers.
    The function should calculate the mean using the sum of the numbers divided by the total count.

sol : def mean_calculate(lst):
      s= sum(lst)
      c= len(lst)
      return s/c
    
      lst = [1,2,3,4,5]
      print("mean value:",mean_calculate(lst))


4.  Write a function called ‘perform_hypothesis_test’ that takes two lists of numbers as input, representing two samples. 
    The function should perform a two-sample t-test and return the p-value. Use the ‘scipy.stats’ module in Python to calculate the t-test and p-value.

sol : from scipy import stats

      def perform_hypothesis_test(s1, s2):
          t_statistic, p_value = stats.ttest_ind(s1, s2)
          return p_value
      
      sample1 = [1,2,3,4,5]
      sample2 = [2,4,3,5,6]
      p_value = perform_hypothesis_test(sample1, sample2)
      print("P-value:", p_value)






